## The purpose of this code is to compare how OUwie and OUCH and calculate the covariance and weight matrices.

require(OUwie)
require(phytools)
require(corpcor)
require(ouch)
require(ape)
require(magrittr)

##############################
#
#	OUwie analysis
#
##############################

############
# Trees  - one for each hypothesis, with the internal nodes labelled appropriately (below)
############
tree <- read.nexus("av_ultra_fulldataset.nex")
tree_xMpleth  <- tree

############################################
# Regimes at Nodes for each hypothesis
############################################
nodedata <- read.csv("ouwie_nodelabels.csv")

## Node Colors for plots
nodecol <- nodedata
nodecol[-1] <- sapply(nodecol[-1], as.character)
nodecol[nodecol=="x"] <- "black"
nodecol[nodecol=="Mpleth"] <- "red"

## code Regime names as numbers for the OUwie algorithm
nn <- nodedata
nn[-1] <- sapply(nn[-1], as.character)
nn[nn=="x"] <- 1
nn[nn=="Mpleth"] <- 2

tree_xMpleth$node.label <- nn$xMpleth

############################################################
# Tip Data (species labels, genome size and regimes at tips)
############################################################
dat <- read.csv("tree1.dat.csv")
dat$genomesize <- log(dat$genomesize)

tdat <- dat[!is.na(dat$genomesize),]  # tip data
ndat <- dat[is.na(dat$genomesize),]   # node data

oo <- sapply(tree$tip.label, function(x) grep(x, tdat$labels))    ## reorder tdat to match order of tip labels in phylo tree

tipdat <- tdat[oo,]
tipdat <- tipdat[c("labels", "xMpleth", "genomesize")]

## Tip Colors for plots
tipcol <- tipdat
tipcol[2] <- sapply(tipcol[2], as.character)
tipcol[tipcol=="x"] <- "black"
tipcol[tipcol=="Mpleth"] <- "red"

## code Regime names as numbers for the OUwie algorithm
tt <- tipdat
tt[2] <- sapply(tt[2], as.character)
tt[tt=="x"] <- 1
tt[tt=="Mpleth"] <- 2

### input dataframes - one for each hypothesis
data.xMpleth <- tt[c("labels", "xMpleth", "genomesize")]

###############################################################
###  xMpleth
###############################################################
plot(tree_xMpleth, cex=.6)     # plot tree with slightly reduced font size
nodelabels(pch=21, bg=nodecol$xMpleth)   # plot node labels
tiplabels(pch=21, bg=tipcol$xMpleth)   # plot tip labels
title("xMpleth")


## Setting root.station=FALSE causes OUwie to estimate theta_0; setting root.station=TRUE drops theta_0 from the model and assumes that it is distributed according to the stationary distribution of the OU process
## To make the model as consistent with ouch as possible, I will rescale the branch lengths in proportion to the total height of the tree. This makes the results inconsistent with geiger.
xMpleth.BM <- OUwie(tree_xMpleth,data.xMpleth,model=c("BM1"),scaleHeight=TRUE)
xMpleth.OUM <- OUwie(tree_xMpleth,data.xMpleth,model=c("OUM"),root.station=TRUE,scaleHeight=TRUE)

##############################
#
#	OUCH analysis
#
##############################
# setup
dat <- read.csv("tree1.dat.csv")
tree <- read.nexus("av_ultra_fulldataset.nex")
tree <- ape2ouch(tree)
rownames(dat) <- dat$nodes
regimes <- dat["xMpleth"]
regimes <- factor(regimes[,1])
names(regimes) <- rownames(dat["xMpleth"])
gsz <- log(dat['genomesize'])

# Plot the xMpleth hypothesis
plot(tree, regimes=dat['xMpleth'], cex=.5)

# fit models. Results in res.bm, res.ou
res.bm <- brown(gsz,  tree)
res.ou <- hansen(gsz, tree, regimes, sqrt.alpha=1, sigma=1)

##############################
#  Compare model fits
##############################

## Brownian motion model fits
xMpleth.BM ## OUwie
summary(res.bm) ## ouch
## These agree with one another

## OU model fits
xMpleth.OUM ## OUwie
summary(res.ou) ## ouch
## These do not agree at all.
## In particular, the thetas estimated for the Mpleth regime are really, really different between the two. The OUwie optimum seems reasonable, but the ouch optimum doesn't really. Note that both estimate a fairly similar optimum for the root state (regime "x" for ouch, the first row for OUwie)
xMpleth.OUM$theta
summary(res.ou)$optima

## Check to make sure the trees are matching up, and this difference isn't because something weird is happening with how ouch is assigning genome sizes to the taxa
treedf <- as(tree,'data.frame')
treedf$genomesize2 <- gsz[gsz %>% rownames %>% as.numeric %>% order,1]
## merges based on species labels to make sure that genome sizes match for each label
merge(data.xMpleth, treedf)
merge(data.xMpleth, treedf)[,c('genomesize','genomesize2')]
## These match, suggesting that isn't the difference.

## Try this - fit the OUCH xMpleth model to alpha and sigma optimized by OUwie
xMpleth.OUwieparams <- update (res.ou, sqrt.alpha = sqrt(xMpleth.OUM$solution[1]), sigma = sqrt(xMpleth.OUM$solution[2]), fit=FALSE)
summary(xMpleth.OUwieparams)
xMpleth.OUM
## Interestingly, this is helpful. The theta values are different between ouch and OUwie. From the appendix of Butler and King, it is clear that the theta values can be directly calculated from the covariance and weight matrices (Eq A8), so the fact that the estimates of theta are different even when the supplied alpha values are identical suggests that these two matrices are being computed differently by the two algorithms.

#########################################################################
#                                                                       #
#	COMPUTING THE WEIGHT AND COVARIANCE MATRICES FOR OUCH           #
#                                                                       #
#########################################################################
data <- gsz
tree <- tree
regimes <- regimes
sqrt.alpha <- sqrt(2.357531e-9) ## from xMpleth.OUM
sigma <- sqrt(1.232192e-1)

## From inside hansen.R hansen() function
source("hansen.R")
nm <- rownames(data)
data <- lapply(as.list(data),function(x){names(x)<-nm;x})
nchar <- length(data)
data <- lapply(data,function(x)x[tree@nodes])
dat <- do.call(c,lapply(data,function(y)y[tree@term]))
nsymargs <- nchar*(nchar+1)/2
nalpha <- length(sqrt.alpha)
nsigma <- length(sigma)

nm <- deparse(substitute(regimes))[1]
regimes <- list(regimes)
names(regimes) <- nm
regimes <- rep(regimes,nchar)
regimes <- lapply(regimes,function(x)x[tree@nodes])
ouch.regimes <- regimes ## store this because it is critical for calculating the weight and covariance matrices
beta <- regime.spec(tree,regimes)

## From inside hansen.R ou.lik.fn() function
alpha <- sym.par(sqrt.alpha)
sigma <- sym.par(sigma)
n <- length(dat)
ev <- eigen(alpha,symmetric=TRUE)
system("R CMD SHLIB weight-matrix.c")
dyn.load("weight-matrix.so")
w <- .Call("ouch_weights",object=tree,lambda=ev$values,S=ev$vectors,beta=beta)
system("R CMD SHLIB covar-matrix.c")
dyn.load("covar-matrix.so")
v <- .Call("ouch_covar",object=tree,lambda=ev$values,S=ev$vectors,sigma.sq=sigma)
## This executes eqn (A8) in Butler and King 2004
source("glssoln.R")
gsol <- try(
    glssoln(w,dat,v),
    silent=FALSE
)
theta <- gsol$coeff

#########################################################################
#                                                                       #
#	COMPUTING THE WEIGHT AND COVARIANCE MATRICES FOR OUwie          #
#                                                                       #
#########################################################################

## Here are the key functions
source("varcov.ou.R")
source("weight.mat.R")
phy <- tree_xMpleth
data <- data.xMpleth

## from OUwie() function in OUwie.R
data<-data.frame(data[,2], data[,3], row.names=data[,1])
data<-data[phy$tip.label,]
n=max(phy$edge[,1])
ntips=length(phy$tip.label)
tot.states<-factor(c(phy$node.label,as.character(data[,1])))
k<-length(levels(tot.states))
int.states<-factor(phy$node.label)
phy$node.label=as.numeric(int.states)
tip.states<-factor(data[,1])
data[,1]<-as.numeric(tip.states)

root.state <- phy$node.label[1]
int.state <- phy$node.label[-1]
##New tree matrix to be used for subsetting regimes
edges=cbind(c(1:(n-1)),phy$edge,nodeHeights(phy))
edges[,4:5]<-edges[,4:5]/max(nodeHeights(phy))
edges=edges[sort.list(edges[,3]),]
mm<-c(data[,1],int.state)
regime <- matrix(0,nrow=length(mm),ncol=length(unique(mm)))
##Generates an indicator matrix from the regime vector
for (i in 1:length(mm)) {
    regime[i,mm[i]] <- 1
}
##Finishes the edges matrix
edges=cbind(edges,regime)
##Resort the edge matrix so that it looks like the original matrix order
edges=edges[sort.list(edges[,1]),]
x<-as.matrix(data[,2])
index.mat<-matrix(0,2,k)
np=2
index<-matrix(TRUE,2,k)
index.mat[1,1:k]<-1
index.mat[2,1:k]<-2
param.count<-np+k
bool=TRUE

## estimates from previous fit
p <- c(2.357531e-9, 1.232192e-1)
Rate.mat <- matrix(1, 2, k)
Rate.mat[] <- c(p, 1e-10)[index.mat]
N<-length(x[,1])
V<-varcov.ou(phy, edges, Rate.mat, root.state=1, simmap.tree=FALSE, scaleHeight=TRUE)
W<-weight.mat(phy, edges, Rate.mat, root.state=1, simmap.tree=FALSE, scaleHeight=TRUE, assume.station=TRUE)
## here is the calculation of the thetas
diag(V) <- diag(V)+p[length(p)] ## error is estimated
theta<-pseudoinverse(t(W)%*%pseudoinverse(V)%*%W)%*%t(W)%*%pseudoinverse(V)%*%x

## These are really different from one another
v
V

## As are these
w
W

## Ah, but the orders of taxa are not quite the same between the two, which might help explain the differences. For example, column 1 in w represents the root regime, whereas that is colum 2 in W. Can I figure out the order differences?
head(w)
tail(W)

## Try the ouch method of finding theta using the OUwie weight and covariance matrices
gsol <- try(
    glssoln(W,x[,1],V),
    silent=FALSE
)
gsol$coeff
theta
## These agree, so the differences are due to each method's way of calculating the covariance and weight matrices

##################################################################
##
##            USING SIMULATED PHYLOGENIES AND DATA
##
##################################################################

## It occurs to me that one potential issue is that this matrix and regime specification are really complicated. It's actually pretty hard to keep track of whether the two methods are actually dealing with the regime paintings properly. They definitely seem to be, but it would make me feel better if I could compare the two methods in a more controlled way. In the directory Simulation_recovery_OUwie_OUCH I performed a simulation-recovery experiment using simulated trees and simulated data and showed that OUwie and OUCH often converge to very similar parameter estimates. These trees and regime paintings were much simpler, so it's important to keep in mind that one method or the other may be screwing things up when the trees and regimes get more complicated, but this is a nice simple place to start a comparison.
## All of the functions required are given at the bottom of this script.
##
treeseed <- 68657 ## generates a tree with 50 tips
phenoseed <- 429561 ## for generating phenotypic data

## Generate trees for OUCH and OUwie
set.seed(treeseed)
## generate a Yule tree
tree <- gen.tree(waittime=0.3, endtime=1)
labels <- rep('', nrow(tree))
labels[which(tree$time==1)] <- paste0('Sp',1:sum(tree$time==1))
tree$labels <- labels

## convert it to an ouch tree
ou.tree <- ouchtree(nodes=tree$node, ancestors=tree$ancestor, times=tree$time, labels=tree$labels)
## add regimes that branch at the ancestral node
ou.reg <- paint(ou.tree, subtree=c('1'='1','2'='2'), branch=c('1'='1', '2'='2'))

## convert the ouchtree to an apetree
source("convert.R") ## for converting ouchtree to apetree
ape.tree <- convert(ot=ou.tree)
## Label the internal nodes with their regime
## figure out which clade is in regime 2
## root is ntips+1, find its daughters
daughters <- which(ape.tree$edge[,1]==ou.tree@nterm+1)
## which daughter corresponds to node 2 in the ouchtree?
node2 <- which(round(ape.tree$edge.length[daughters],4)==round(ou.tree@times[2],4))
## what is the nodelabel for this daughter
start <- ape.tree$edge[daughters[node2],2]
## what is the nodelabel for the other daughter?
finish <- ape.tree$edge[daughters[-node2],2]
## create node.labels
nodes <- (ou.tree@nterm+1):(ape.tree$Nnode+ou.tree@nterm)
regs <- rep('1', length(nodes))
reg2 <- start:(finish-1)
regs[which(nodes%in%reg2)] <- '2'
ape.tree$node.label <- regs

## generate the phenotypic data
set.seed(phenoseed)
## simulate phenotypic data
x <- gen.phenotypic.values(ou.tree, ou.reg, theta=c(-1,1), alpha=3, sigma=1)
## create data frames of phenotypic data for OUCH
ou.dat <- data.frame(val=x)
## and for OUwie
ape.dat <- as(ou.tree, 'data.frame')[,c(4,1,2,3)]
ape.dat$val <- x
ape.dat$reg <- ou.reg
ape.dat <- ape.dat[!is.na(ape.dat$val),c('labels','reg','val')]

ou.OU <- hansen(ou.dat, ou.tree, ou.reg, sqrt.alpha=1, sigma=1)
ape.OUM <- OUwie(ape.tree, ape.dat, model='OUM')

#########################################################################
#                                                                       #
#	COMPUTING THE WEIGHT AND COVARIANCE MATRICES FOR OUCH           #
#                                                                       #
#########################################################################
data <- ou.dat
tree <- ou.tree
regimes <- ou.reg
sqrt.alpha <- 1
sigma <- 1

## From inside hansen.R hansen() function
source("hansen.R")
nm <- rownames(data)
data <- lapply(as.list(data),function(x){names(x)<-nm;x})
nchar <- length(data)
data <- lapply(data,function(x)x[tree@nodes])
dat <- do.call(c,lapply(data,function(y)y[tree@term]))
nsymargs <- nchar*(nchar+1)/2
nalpha <- length(sqrt.alpha)
nsigma <- length(sigma)

nm <- deparse(substitute(regimes))[1]
regimes <- list(regimes)
names(regimes) <- nm
regimes <- rep(regimes,nchar)
regimes <- lapply(regimes,function(x)x[tree@nodes])
ouch.regimes <- regimes ## store this because it is critical for calculating the weight and covariance matrices
beta <- regime.spec(tree,regimes)

## From inside hansen.R ou.lik.fn() function
alpha <- sym.par(sqrt.alpha)
sigma <- sym.par(sigma)
n <- length(dat)
ev <- eigen(alpha,symmetric=TRUE)
system("R CMD SHLIB weight-matrix.c")
dyn.load("weight-matrix.so")
ouch.w <- .Call("ouch_weights",object=tree,lambda=ev$values,S=ev$vectors,beta=beta)
system("R CMD SHLIB covar-matrix.c")
dyn.load("covar-matrix.so")
ouch.v <- .Call("ouch_covar",object=tree,lambda=ev$values,S=ev$vectors,sigma.sq=sigma)
## This executes eqn (A8) in Butler and King 2004
source("glssoln.R")
gsol <- try(
    glssoln(ouch.w,dat,ouch.v),
    silent=FALSE
)
ouch.theta <- gsol$coeff

#########################################################################
#                                                                       #
#	COMPUTING THE WEIGHT AND COVARIANCE MATRICES FOR OUwie          #
#                                                                       #
#########################################################################

## Here are the key functions
source("varcov.ou.R")
source("weight.mat.R")
phy <- ape.tree
data <- ape.dat

data<-data.frame(data[,2], data[,3], row.names=data[,1])
data<-data[phy$tip.label,]
n=max(phy$edge[,1])
ntips=length(phy$tip.label)
tot.states<-factor(c(phy$node.label,as.character(data[,1])))
k<-length(levels(tot.states))
int.states<-factor(phy$node.label)
phy$node.label=as.numeric(int.states)
tip.states<-factor(data[,1])
data[,1]<-as.numeric(tip.states)

root.state <- phy$node.label[1]
int.state <- phy$node.label[-1]
##New tree matrix to be used for subsetting regimes
edges=cbind(c(1:(n-1)),phy$edge,nodeHeights(phy))
edges[,4:5]<-edges[,4:5]/max(nodeHeights(phy))
edges=edges[sort.list(edges[,3]),]
mm<-c(data[,1],int.state)
regime <- matrix(0,nrow=length(mm),ncol=length(unique(mm)))
##Generates an indicator matrix from the regime vector
for (i in 1:length(mm)) {
    regime[i,mm[i]] <- 1
}
##Finishes the edges matrix
edges=cbind(edges,regime)
##Resort the edge matrix so that it looks like the original matrix order
edges=edges[sort.list(edges[,1]),]
x<-as.matrix(data[,2])
index.mat<-matrix(0,2,k)
np=2
index<-matrix(TRUE,2,k)
index.mat[1,1:k]<-1
index.mat[2,1:k]<-2
param.count<-np+k
bool=TRUE

## parameter estimates
p <- c(1,1)
Rate.mat <- matrix(1, 2, k)
Rate.mat[] <- c(p, 1e-10)[index.mat]
N<-length(x[,1])
ouwie.V<-varcov.ou(phy, edges, Rate.mat, root.state=1, simmap.tree=FALSE, scaleHeight=TRUE)
ouwie.W<-weight.mat(phy, edges, Rate.mat, root.state=1, simmap.tree=FALSE, scaleHeight=TRUE, assume.station=TRUE)
## here is the calculation of the thetas
diag(ouwie.V) <- diag(ouwie.V)+p[length(p)] ## error is estimated
ouwie.theta<-pseudoinverse(t(ouwie.W)%*%pseudoinverse(ouwie.V)%*%ouwie.W)%*%t(ouwie.W)%*%pseudoinverse(ouwie.V)%*%x

## Creates an ouchtree object.
##
## 'waittime' must be specified by the user, and is the
## expected time to a branching event, assuming the branching
## follows a Poisson process (that is, that branching events
## are exponentially distributed)
##
## 'endtime' must also be specified and determines how long to
## let the branching process proceed.
##
## The smaller the value of waittime, or the larger the value
## of endtime, the larger the tree that will be produced. If
## only these two variables are set, the tree that is produced
## will be ultrametric; specifically, it will be a Yule tree,
## corresponding to a pure birth process.
##
## 'time' can also be specified, setting the time of the root
## node.

## A birth-death branching process can be simulated by setting
## the value of extrate, which determines the rate at which
## lineages go extinct. This rate is also assumed to be
## exponentially distributed.
##
gen.tree <- function(waittime, endtime,
                     time = 0, extrate = 0,
                     anc.node = NA, tree) {
    if (missing(tree))
        tree <- matrix(NA,0,3,
                       dimnames=list(NULL,c("node","ancestor","time")))
    curr.node <- nrow(tree)+1
    if (time < endtime) {
        tree <- rbind(tree,c(curr.node,anc.node,time))
        extinct.time <- if (extrate > 0) {
            time+rexp(2,rate=extrate)
        } else {
            c(Inf,Inf)
        }
        time <- pmin(time+rexp(2,rate=1/waittime),endtime)
        for (k in 1:2) {
            if (time[k] < extinct.time[k]) {
                tree <- Recall(time=time[k],
                               waittime=waittime,endtime=endtime,extrate=extrate,anc.node=curr.node,tree=tree)
            } else {
                tree <- rbind(tree,c(nrow(tree)+1,curr.node,extinct.time[k]))
            }
        }
    } else {
        tree <- rbind(tree,c(curr.node,anc.node,time))
    }
    return(as.data.frame(tree))
}

## Generate phenotypic data according to an Ornstein-Uhlenbeck
## process, given an ouchtree object specified by tree, regimes
## specified by regimes, and OU parameters theta, alpha, and sigma.
## This is done by recursion, which gen.phenotypic.values acting as
## the "parent" function that calls set.phenotypic.values, the
## function that is recursed over.
gen.phenotypic.values <- function(tree, regimes, theta, alpha, sigma, remove.anc=TRUE) {
  if (class(tree) == 'data.frame')
    tree <- with(tree, ouchtree(node,ancestor,time))
  if (tree@nnodes != length(regimes))
    stop('Length of regime specification != number of nodes in tree; each node in tree must be assigned to a regime')
  if (length(theta) != length(levels(regimes)))
    stop('Each regime must have a unique theta value specified as the selective optima')

  root.reg <- as.numeric(regimes[1])
  root.pheno <- calc.root.pheno(theta[root.reg], alpha, sigma)
  pheno <<- vector(mode='numeric', length=tree@nnodes)
  set.phenotypic.values(curr.node=1, anc.node=0, anc.pheno=root.pheno, tree=tree, regimes=regimes, theta=theta, alpha=alpha, sigma=sigma)

  ## if T, set the phenotypic values of internal nodes to NA
  if (remove.anc==T)
    pheno[as.numeric(setdiff(tree@nodes, tree@term))] <<- NA

  pheno
}
## Calculate the phenotypic value of the ancestral node as being drawn
## from the stationary distribution of the OU process.
calc.root.pheno <- function(theta, alpha, sigma) {
  ## mean and variance of stationary distribution
  mean <- theta
  var <- sigma^2/(2*alpha)
  rnorm(1, mean=mean, sd=sqrt(var))
}
## This function recursively sets the phenotypic values of the nodes
## in an ouchtree object specified by tree.  The values are, by
## default, set for a vector called 'pheno'
set.phenotypic.values <- function(curr.node, anc.node, anc.pheno, tree, regimes, theta, alpha, sigma) {
  ## set the phenotype of the current node
  if (curr.node == 1) {
    pheno[curr.node] <<- anc.pheno

    ## get the descendents of the root node and set their phenotypes
    desc <- which(tree@ancestors==curr.node)
    Recall(curr.node=desc[1], anc.node=curr.node, anc.pheno=anc.pheno, tree=tree, regimes=regimes, theta=theta, alpha=alpha, sigma=sigma)
    Recall(curr.node=desc[2], anc.node=curr.node, anc.pheno=anc.pheno, tree=tree, regimes=regimes, theta=theta, alpha=alpha, sigma=sigma)
  }
  else {
    ## generate a new phenotypic value
    x0 <- anc.pheno
    t <- as.numeric(tree@times[curr.node])-as.numeric(tree@times[anc.node])
    th <- theta[as.numeric(levels(regimes)[regimes[curr.node]])]
    a <- alpha
    p <- x0*exp(-a*t) + th*(1-exp(-a*t)) +
      sigma*sqrt((1-exp(-2*a*t))/(2*a))*rnorm(1, 0, 1)

    ## set the value of the phenotype
    pheno[curr.node] <<- p

    ## if the curr.node is not a tip, get its ancestors and set their
    ## phenotypes
    if (!(curr.node %in% tree@term)) {
      desc <- which(tree@ancestors==curr.node)

      ## set the phenotypes for all descendents
      for (n in 1:length(desc))
        Recall(curr.node=desc[n], anc.node=curr.node, anc.pheno=p, tree=tree,
               regimes=regimes, theta=theta, alpha=alpha, sigma=sigma)
    }
  }
}
