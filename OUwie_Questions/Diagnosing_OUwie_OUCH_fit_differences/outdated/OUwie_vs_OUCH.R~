## The purpose of this code is to compare OUwie and OUCH fits.
## In particular, I will show that the calculation of likelihoods is not the same between the two methods, even when the two methods should agree with one another.

##############################
#
#	OUwie analysis
#
##############################

require(OUwie)

############
# Trees  - one for each hypothesis, with the internal nodes labelled appropriately (below)
############
tree <- read.nexus("av_ultra_fulldataset.nex")
tree_xMpleth  <- tree

############################################
# Regimes at Nodes for each hypothesis
############################################
nodedata <- read.csv("ouwie_nodelabels.csv")

## Node Colors for plots
nodecol <- nodedata
nodecol[-1] <- sapply(nodecol[-1], as.character)
nodecol[nodecol=="x"] <- "black"
nodecol[nodecol=="Mpleth"] <- "red"

## code Regime names as numbers for the OUwie algorithm
nn <- nodedata
nn[-1] <- sapply(nn[-1], as.character)
nn[nn=="x"] <- 1
nn[nn=="Mpleth"] <- 2

tree_xMpleth$node.label <- nn$xMpleth

############################################################
# Tip Data (species labels, genome size and regimes at tips)
############################################################
dat <- read.csv("tree1.dat.csv")
dat$genomesize <- log(dat$genomesize)

tdat <- dat[!is.na(dat$genomesize),]  # tip data
ndat <- dat[is.na(dat$genomesize),]   # node data

oo <- sapply(tree$tip.label, function(x) grep(x, tdat$labels))    ## reorder tdat to match order of tip labels in phylo tree

tipdat <- tdat[oo,]
tipdat <- tipdat[c("labels", "xMpleth", "genomesize")]

## Tip Colors for plots
tipcol <- tipdat
tipcol[2] <- sapply(tipcol[2], as.character)
tipcol[tipcol=="x"] <- "black"
tipcol[tipcol=="Mpleth"] <- "red"

## code Regime names as numbers for the OUwie algorithm
tt <- tipdat
tt[2] <- sapply(tt[2], as.character)
tt[tt=="x"] <- 1
tt[tt=="Mpleth"] <- 2

### input dataframes - one for each hypothesis
data.xMpleth <- tt[c("labels", "xMpleth", "genomesize")]

###############################################################
###  xMpleth
###############################################################
plot(tree_xMpleth, cex=.6)     # plot tree with slightly reduced font size
nodelabels(pch=21, bg=nodecol$xMpleth)   # plot node labels
tiplabels(pch=21, bg=tipcol$xMpleth)   # plot tip labels
title("xMpleth")


## Setting root.station=FALSE causes OUwie to estimate theta_0; setting root.station=TRUE drops theta_0 from the model and assumes that it is distributed according to the stationary distribution of the OU process
## To make the model as consistent with ouch as possible, I will rescale the branch lengths in proportion to the total height of the tree. This makes the results inconsistent with geiger.
xMpleth.BM <- OUwie(tree_xMpleth,data.xMpleth,model=c("BM1"),scaleHeight=TRUE)
xMpleth.OUM <- OUwie(tree_xMpleth,data.xMpleth,model=c("OUM"),root.station=TRUE,scaleHeight=TRUE)

##############################
#
#	OUCH analysis
#
##############################
require(ape)
require(ouch)

# setup
dat <- read.csv("tree1.dat.csv")
tree <- read.nexus("av_ultra_fulldataset.nex")
tree <- ape2ouch(tree)
rownames(dat) <- dat$nodes
regimes <- dat["xMpleth"]
regimes <- factor(regimes[,1])
names(regimes) <- rownames(regimes)
gsz <- log(dat['genomesize'])

# Plot the xMpleth hypothesis
plot(tree, regimes=dat['xMpleth'], cex=.5)

# fit models. Results in res.bm, res.ou
res.bm <- brown(gsz,  tree)
res.ou <- hansen(gsz, tree, regimes, sqrt.alpha=1, sigma=1)

##############################
#  Compare model fits
##############################

## Brownian motion model fits
xMpleth.BM ## OUwie
summary(res.bm) ## ouch
## These agree with one another

## OU model fits
xMpleth.OUM ## OUwie
summary(res.ou) ## ouch
## These do not agree at all.
## In particular, the thetas estimated for the Mpleth regime are really, really different between the two. The OUwie optimum seems reasonable, but the ouch optimum doesn't really. Note that both estimate a fairly similar optimum for the root state (regime "x" for ouch, the first row for OUwie)
xMpleth.OUM$theta
summary(res.ou)$optima

## Check to make sure the trees are matching up, and this difference isn't because something weird is happening with how ouch is assigning genome sizes to the taxa
treedf <- as(tree,'data.frame')
treedf$genomesize2 <- gsz[gsz %>% rownames %>% as.numeric %>% order,1]
## merges based on species labels to make sure that genome sizes match for each label
merge(data.xMpleth, treedf)
merge(data.xMpleth, treedf)[,c('genomesize','genomesize2')]
## These match, suggesting that isn't the difference.

## Try this - fit the OUCH xMpleth model to alpha and sigma optimized by OUwie
xMpleth.OUwieparams <- update (res.ou, sqrt.alpha = sqrt(xMpleth.OUM$solution[1]), sigma = sqrt(xMpleth.OUM$solution[2]), fit=FALSE)
summary(xMpleth.OUwieparams)
xMpleth.OUM
## Interestingly, this is helpful. The theta values are different between ouch and OUwie. From the appendix of Butler and King, it is clear that the theta values can be directly calculated from the covariance and weight matrices (Eq A8), so the fact that the estimates of theta are different even when the supplied alpha values are identical suggests that these two matrices are being computed differently by the two algorithms.

#########################################################################
#                                                                       #
#	COMPUTING THE WEIGHT AND COVARIANCE MATRICES FOR OUCH           #
#                                                                       #
#########################################################################
require(ape)
require(ouch)
data <- gsz
tree <- tree
regimes <- regimes
sqrt.alpha <- sqrt(2.357531e-9) ## from xMpleth.OUM.TT
sigma <- sqrt(1.232192e-1)

## From inside hansen.R hansen() function
source("hansen.R")
nm <- rownames(data)
data <- lapply(as.list(data),function(x){names(x)<-nm;x})
nchar <- length(data)
data <- lapply(data,function(x)x[tree@nodes])
dat <- do.call(c,lapply(data,function(y)y[tree@term]))
nsymargs <- nchar*(nchar+1)/2
nalpha <- length(sqrt.alpha)
nsigma <- length(sigma)

nm <- deparse(substitute(regimes))[1]
regimes <- list(regimes)
names(regimes) <- nm
regimes <- rep(regimes,nchar)
regimes <- lapply(regimes,function(x)x[tree@nodes])
beta <- regime.spec(tree,regimes)

## From inside hansen.R ou.lik.fn() function
alpha <- sym.par(sqrt.alpha)
sigma <- sym.par(sigma)
n <- length(dat)
ev <- eigen(alpha,symmetric=TRUE)
system("R CMD SHLIB weight-matrix.c")
dyn.load("ouch/src/weight-matrix.so")
w <- .Call("ouch_weights",object=tree,lambda=ev$values,S=ev$vectors,beta=beta)
system("R CMD SHLIB covar-matrix.c")
dyn.load("ouch/src/covar-matrix.so")
v <- .Call("ouch_covar",object=tree,lambda=ev$values,S=ev$vectors,sigma.sq=sigma)
## This executes eqn (A8) in Butler and King 2004
source("glssoln.R")
gsol <- try(
    glssoln(w,dat,v),
    silent=FALSE
)
theta <- gsol$coeff

#########################################################################
#                                                                       #
#	COMPUTING THE WEIGHT AND COVARIANCE MATRICES FOR OUwie          #
#                                                                       #
#########################################################################

## Here are the key functions
source("varcov.ou.R")
source("weight.mat.R")
phy <- tree_xMpleth
data <- data.xMpleth
data<-data.frame(data[,2], data[,3], row.names=data[,1])
data<-data[phy$tip.label,]
n=max(phy$edge[,1])
ntips=length(phy$tip.label)
tot.states<-factor(c(phy$node.label,as.character(data[,1])))
k<-length(levels(tot.states))
int.states<-factor(phy$node.label)
phy$node.label=as.numeric(int.states)
tip.states<-factor(data[,1])
data[,1]<-as.numeric(tip.states)

library(phytools) ## for the nodeHeights function
root.state <- phy$node.label[1]
int.state <- phy$node.label[-1]
##New tree matrix to be used for subsetting regimes
edges=cbind(c(1:(n-1)),phy$edge,nodeHeights(phy))
edges[,4:5]<-edges[,4:5]/max(nodeHeights(phy))
edges=edges[sort.list(edges[,3]),]
mm<-c(data[,1],int.state)
regime <- matrix(0,nrow=length(mm),ncol=length(unique(mm)))
##Generates an indicator matrix from the regime vector
for (i in 1:length(mm)) {
    regime[i,mm[i]] <- 1
}
##Finishes the edges matrix
edges=cbind(edges,regime)
##Resort the edge matrix so that it looks like the original matrix order
edges=edges[sort.list(edges[,1]),]
x<-as.matrix(data[,2])
index.mat<-matrix(0,2,k)
np=2
index<-matrix(TRUE,2,k)
index.mat[1,1:k]<-1
index.mat[2,1:k]<-2
param.count<-np+k
bool=TRUE

## estimates from previous fit
p <- c(2.357531e-9, 1.232192e-1)
Rate.mat <- matrix(1, 2, k)
Rate.mat[] <- c(p, 1e-10)[index.mat]
N<-length(x[,1])
V<-varcov.ou(phy, edges, Rate.mat, root.state=1, simmap.tree=FALSE, scaleHeight=TRUE)
W<-weight.mat(phy, edges, Rate.mat, root.state=1, simmap.tree=FALSE, scaleHeight=TRUE, assume.station=TRUE)
## here is the calculation of the thetas
diag(V) <- diag(V)+p[length(p)] ## error is estimated
library(corpcor)
theta<-pseudoinverse(t(W)%*%pseudoinverse(V)%*%W)%*%t(W)%*%pseudoinverse(V)%*%x

## These are really different from one another
v
V

## As are these
w
W

## Try the ouch method of finding theta using the OUwie weight and covariance matrices
gsol <- try(
    glssoln(W,x[,1],V),
    silent=FALSE
)
gsol$coeff
theta
## These agree, so the differences are due to each method's way of calculating the covariance and weight matrices

print(v)
print(V)
